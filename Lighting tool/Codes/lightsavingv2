import maya.cmds as cmds
import json
import os

def create_light(light_type, *args):
    light_types = {
        "Point Light": "pointLight",
        "Directional Light": "directionalLight",
        "Spot Light": "spotLight",
        "Area Light": "areaLight"
    }
    if light_type in light_types:
        light_name = cmds.shadingNode(light_types[light_type], asLight=True)
        light_transform = cmds.listRelatives(light_name, parent=True, fullPath=True)
        if light_transform:
            cmds.select(light_transform)
            return light_transform[0]
    else:
        cmds.warning("Invalid light type specified")

def delete_selected_lights(*args):
    selected_objects = cmds.ls(selection=True, dag=True, long=True)
    for obj in selected_objects:
        if cmds.objectType(obj, isType="light"):
            light_transform = cmds.listRelatives(obj, parent=True, fullPath=True)
            if light_transform:
                cmds.delete(light_transform)
        elif cmds.listRelatives(obj, children=True, type="light"):
            cmds.delete(obj)

def group_lights(*args):
    selected_objects = cmds.ls(selection=True)
    if selected_objects:
        group_name = cmds.group(selected_objects, name="light_group")
        return group_name
    else:
        cmds.warning("No lights selected to group")

def rename_light(*args):
    new_name = cmds.textFieldGrp("renameLightField", query=True, text=True)
    selected_objects = cmds.ls(selection=True, long=True)
    for obj in selected_objects:
        if cmds.objectType(obj, isType="transform") and cmds.listRelatives(obj, children=True, type="light"):
            cmds.rename(obj, new_name)
        else:
            cmds.warning(f"{obj} is not a light transform.")

def rename_group(*args):
    new_name = cmds.textFieldGrp("renameGroupField", query=True, text=True)
    selected_objects = cmds.ls(selection=True, long=True)
    for obj in selected_objects:
        if cmds.objectType(obj, isType="transform") and cmds.listRelatives(obj, children=True):
            cmds.rename(obj, new_name)
        else:
            cmds.warning(f"{obj} is not a transform or has no children.")

# ... (other functions remain the same)

def save_lighting_preset(*args):
    preset_name = cmds.textFieldGrp("presetNameField", query=True, text=True)
    file_path = cmds.fileDialog2(fileMode=0, caption="Save Lighting Preset", fileFilter='Lighting Preset (*.json)', returnFilter=True)
    
    if not file_path:
        return
    
    preset_path = file_path[0]
    if not preset_path.lower().endswith('.json'):
        preset_path += '.json'
    
    lights = cmds.ls(lights=True)
    light_data = {}
    for light in lights:
        light_data[light] = {
            "type": cmds.objectType(light),
            "attributes": {}
        }
        attrs = cmds.listAttr(light, keyable=True)
        for attr in attrs:
            try:
                value = cmds.getAttr(light + "." + attr)
                light_data[light]["attributes"][attr] = value
            except:
                pass
    
    with open(preset_path, 'w') as f:
        json.dump(light_data, f)
    
    update_preset_list()
    cmds.textScrollList("presetList", edit=True, selectItem=preset_name)

# ... (rest of the script remains the same)

def lighting_tool_ui():
    window_name = "lightingToolWindow"
    
    if cmds.window(window_name, exists=True):
        cmds.deleteUI(window_name)
    
    cmds.window(window_name, title="Lighting Tool", widthHeight=(300, 800))
    cmds.columnLayout(adjustableColumn=True)
    
    # ... (previous UI elements remain the same)
    
    cmds.separator(height=10, style='in')
    cmds.text(label="Lighting Presets", align='center')
    cmds.textFieldGrp("presetNameField", label="Preset Name", text="new_preset")
    cmds.button(label="Save Preset", command=save_lighting_preset)
    cmds.button(label="Load Preset", command=load_lighting_preset)
    cmds.textScrollList("presetList", height=100)
    update_preset_list()
    
    cmds.showWindow(window_name)

lighting_tool_ui()
